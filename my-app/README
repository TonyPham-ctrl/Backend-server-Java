Assignment 2 distributedSystem Semester 2 2024

This README file count as documentation for this project

This project uses the following dependencies:
- Maven (Assist in development, compilation, project architecture and dependency installations)
- JUnit (Unit testing)
- JSON simple (JSON utilities and parsing library)
in the pom.xml file from Maven, there are additional details about this project that this documentation may have missed.

Entries within this documentation are:
* LAMPORT CLOCK
* COMPILING INSTRUCTIONS
* REFERENCES AND RESOURCES
* QUEUE SYSTEM (AggregationServer.java)


LAMPORT CLOCK:
Lamport clock is implemented in GETClient, AggregationServer, and ContentServer
The clock starts at 1 at initialisation of each program and increments by 1:
 - before sending a message
 - receiving a message
As per the reqirement, when a GETClient sends a GET request to AggregationServer, the server is expected to send back
the appropriate JSON file requested.  Similarly, when a ContentServer sends a PUT request to AggregationServer, the 
AggregationServer is expected to send confirmation to ContentServer whether the request is successful or not.  Hence, 
for every GET or PUT request received, the AggregationServer will send back a message, which will also increment its' lamport
clock.  
The algorithm used to update the lamport clock on receiving end follows:
currLamportClock = max(currLamportClock, receivedLamportClock) + 1
where currLamportClock represents the current lamport clock value of the receiving entity, and receivedLamportClock represents
the lamport clock value of the entity that sent the request/message

For example: 
GETClient increments its clock to 2 before sending GET request
client(2) -- GET --> AggregationServer(1)
AggregationServer clock increments to 3 upon receiving GET request (as per lamport clock update algorithm)
AggregationServer read the request and prepares to send back JSON file
AggregationServer clock increments to 4 before sending JSON file
AggregationServer(4) -- JSON --> client(2)
GETClient receive JSON file and update its' clock to 5
The exchange ends with AggregationServer(4) and GETClient(5)

This logic applies to content server sending PUT request to AggregationServer


REFERENCES AND RESOURCES:
https://www.javacodegeeks.com/how-to-use-pair-with-java-priorityqueue.html



COMPILING INSTRUCTIONS:
The following compilation instructions uses maven for executing the files, as that is what is used during development
Compiling AggregationServer.java
-> default port
mvn exec:java -Dexec.mainClass="com.mycompany.app.AggregationServer"

-> custom <port> variable
mvn exec:java -Dexec.mainClass="com.mycompany.app.AggregationServer"  -Dexec.args="<port>"

Compiling GETClient.java
-> custom <server_name> and <port>
mvn exec:java -Dexec.mainClass="com.mycompany.app.GETClient" -Dexec.args="<server_name>:<port>"

Compiling ContentServer.java
mvn exec:java -Dexec.mainClass="com.mycompany.app.ContentServer" -Dexec.args="localhost:4567 /home/tonypham/distributedSystem2024S2/my-app/src/main/java/com/mycompany/app/dataFile1.txt"


NOTE: the debugging print statements used to display lamport clock times in GETClient.java, AggregationServer.java and ContentServer.java
are generated by CHATGPT, they are meant PURELY for debugging, all of them are of the function System.out.println("...").  
No external use of artificial intelligence were used to write meaningful code, only debuggin code.  
